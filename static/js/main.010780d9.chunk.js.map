{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["withStyles","card","display","flexDirection","backgroundColor","border","borderRadius","padding","cursor","MozOsxFontSmoothing","backfaceVisibility","transform","transition","props","classes","monster","id","className","alt","src","name","email","cardList","width","margin","gridTemplateColumns","gridGap","monsters","map","search","WebkitAppearance","outline","marginBottom","placeHolder","handleChange","type","placeholder","onChange","App","state","searchField","axios","get","then","response","data","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2SAkCeA,kBA/BA,CACdC,KAAM,CACLC,QAAS,OACTC,cAAe,SACfC,gBAAiB,UACjBC,OAAQ,iBACRC,aAAc,EACdC,QAAS,GACTC,OAAQ,UACRC,oBAAqB,YACrBC,mBAAoB,SACpBC,UAAW,gBACXC,WAAY,2BACZ,UAAW,CACVD,UAAW,iBAiBCX,EAbf,SAAca,GAAQ,IACdC,EAAwBD,EAAxBC,QAASC,EAAeF,EAAfE,QAASC,EAAMH,EAANG,GACzB,OACC,yBAAKC,UAAWH,EAAQb,MACvB,yBACCiB,IAAI,UACJC,IAAG,+BAA0BH,EAA1B,4BAEJ,4BAAKD,EAAQK,MACb,4BAAKL,EAAQM,WCRDrB,kBAnBA,CACdsB,SAAU,CACTC,MAAO,OACPC,OAAQ,SACRtB,QAAS,OACTuB,oBAAqB,kBACrBC,QAAS,KAaI1B,EAVf,SAAkBa,GAAQ,IAClBC,EAAqBD,EAArBC,QAASa,EAAYd,EAAZc,SAChB,OACC,yBAAKV,UAAWH,EAAQQ,UACtBK,EAASC,KAAI,SAACb,GAAD,OACb,kBAAC,EAAD,CAAMA,QAASA,EAASC,GAAID,EAAQC,YCOzBhB,kBArBA,CACd6B,OAAQ,CACPC,iBAAkB,OAClBzB,OAAQ,UACR0B,QAAS,OACTxB,QAAS,GACTgB,MAAO,IAEPS,aAAc,KAaDhC,EAVf,YAAuD,IAAtCiC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,aAAcpB,EAAU,EAAVA,QAC3C,OACC,2BACCG,UAAWH,EAAQe,OACnBM,KAAK,SACLC,YAAaH,EACbI,SAAUH,O,iBCqBEI,E,kDAlCd,WAAYzB,GAAQ,IAAD,8BAClB,cAAMA,IACD0B,MAAQ,CACZZ,SAAU,GACVa,YAAa,IAJI,E,gEAQE,IAAD,OACnBC,IACEC,IAAI,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAACpB,SAAUmB,S,+BAGlC,IAAD,SACwBE,KAAKT,MAA9BZ,EADC,EACDA,SAAUa,EADT,EACSA,YACXS,EAAmBtB,EAASuB,QAAO,SAACnC,GAAD,OACxCA,EAAQK,KAAK+B,cAAcC,SAASZ,EAAYW,kBAEjD,OACC,yBAAKlC,UAAU,OACd,kBAAC,EAAD,CACCgB,YAAY,kBACZC,aAAc,SAACmB,GACd,EAAKN,SAAS,CAACP,YAAaa,EAAEC,OAAOC,WAGvC,wBAAIC,MAAM,KAAV,oBACA,kBAAC,EAAD,CAAU7B,SAAUsB,S,GA9BNQ,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.010780d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {withStyles} from '@material-ui/core/styles';\r\nconst styles = {\r\n\tcard: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tbackgroundColor: '#95dada',\r\n\t\tborder: '1px solid grey',\r\n\t\tborderRadius: 5,\r\n\t\tpadding: 25,\r\n\t\tcursor: 'pointer',\r\n\t\tMozOsxFontSmoothing: 'grayscale',\r\n\t\tbackfaceVisibility: 'hidden',\r\n\t\ttransform: 'translateZ(0)',\r\n\t\ttransition: 'transform 0.25s ease-out',\r\n\t\t'&:hover': {\r\n\t\t\ttransform: 'scale(1.05)'\r\n\t\t}\r\n\t}\r\n};\r\nfunction Card(props) {\r\n\tconst {classes, monster, id} = props;\r\n\treturn (\r\n\t\t<div className={classes.card}>\r\n\t\t\t<img\r\n\t\t\t\talt=\"monster\"\r\n\t\t\t\tsrc={`https://robohash.org/${id}?set=set1&size=180x180`}\r\n\t\t\t/>\r\n\t\t\t<h1>{monster.name}</h1>\r\n\t\t\t<h2>{monster.email}</h2>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default withStyles(styles)(Card);\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Card from '../card/card.component';\r\nconst styles = {\r\n\tcardList: {\r\n\t\twidth: '85vw',\r\n\t\tmargin: '0 auto',\r\n\t\tdisplay: 'grid',\r\n\t\tgridTemplateColumns: '1fr 1fr 1fr 1fr',\r\n\t\tgridGap: 20\r\n\t}\r\n};\r\nfunction CardList(props) {\r\n\tconst {classes, monsters} = props;\r\n\treturn (\r\n\t\t<div className={classes.cardList}>\r\n\t\t\t{monsters.map((monster) => (\r\n\t\t\t\t<Card monster={monster} id={monster.id} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default withStyles(styles)(CardList);\r\n","import React from 'react';\r\n\r\nimport {withStyles} from '@material-ui/core/styles';\r\nconst styles = {\r\n\tsearch: {\r\n\t\tWebkitAppearance: 'none',\r\n\t\tborder: '#ffg122',\r\n\t\toutline: 'none',\r\n\t\tpadding: 10,\r\n\t\twidth: 150,\r\n\t\t//lineHeight: 10,\r\n\t\tmarginBottom: 10\r\n\t}\r\n};\r\nfunction Search({placeHolder, handleChange, classes}) {\r\n\treturn (\r\n\t\t<input\r\n\t\t\tclassName={classes.search}\r\n\t\t\ttype=\"search\"\r\n\t\t\tplaceholder={placeHolder}\r\n\t\t\tonChange={handleChange}\r\n\t\t/>\r\n\t);\r\n} \r\nexport default withStyles(styles)(Search);\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport Search from './components/search/search.component';\nimport axios from 'axios';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\taxios\n\t\t\t.get('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.data)\n\t\t\t.then((users) => this.setState({monsters: users}));\n\t}\n\n\trender() {\n\t\tconst {monsters, searchField} = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Search\n\t\t\t\t\tplaceHolder=\"search monsters\"\n\t\t\t\t\thandleChange={(e) => {\n\t\t\t\t\t\tthis.setState({searchField: e.target.value});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<h1 class=\"a\">Monsters Rolodex</h1>\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}